/***************************************************************************
 # Copyright (c) 2015-21, NVIDIA CORPORATION. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 #  * Redistributions of source code must retain the above copyright
 #    notice, this list of conditions and the following disclaimer.
 #  * Redistributions in binary form must reproduce the above copyright
 #    notice, this list of conditions and the following disclaimer in the
 #    documentation and/or other materials provided with the distribution.
 #  * Neither the name of NVIDIA CORPORATION nor the names of its
 #    contributors may be used to endorse or promote products derived
 #    from this software without specific prior written permission.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
 # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/

/* The simple random number generator we use in our RTXDI bridge.

   We use a built-in falcor PRNG, which is a simple but decent 32-bit LCG chosen
   from "Numerical Recipes."  This seems pretty good, and using a PCG-based
   replacement (i.e., https://www.pcg-random.org/) doesnt seem to give any
   perceptible benefit (but does increase cost).

   This should be really easy to swap out, if needed.
*/


//import Utils.Sampling.PseudoRandom.LCG;
//import Utils.Math.HashUtils;
//import Utils.Math.BitTricks;
import Utils.Sampling.TinyUniformSampleGenerator;


// Define our opaque RAB_RandomSamplerState to explicitly be the Falcor built-in struct
typedef TinyUniformSampleGenerator RAB_RandomSamplerState;


float RAB_GetNextRandom(inout RAB_RandomSamplerState rng)
{
    return sampleNext1D(rng);
}


RAB_RandomSamplerState RAB_InitRandomSampler(uint2 index, uint pass)
{
    //uint seed = blockCipherTEA(interleave_32bit(index), gFrameIndex + pass * 13).x;
    //return createLCG(seed);
    return TinyUniformSampleGenerator(index, gFrameIndex + pass * 13);
}


