/***************************************************************************
 # Copyright (c) 2015-21, NVIDIA CORPORATION. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 #  * Redistributions of source code must retain the above copyright
 #    notice, this list of conditions and the following disclaimer.
 #  * Redistributions in binary form must reproduce the above copyright
 #    notice, this list of conditions and the following disclaimer in the
 #    documentation and/or other materials provided with the distribution.
 #  * Neither the name of NVIDIA CORPORATION nor the names of its
 #    contributors may be used to endorse or promote products derived
 #    from this software without specific prior written permission.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
 # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/

#pragma once

#include "Utils/Math/MathConstants.slangh"

/** Payload for our shadow rays.
*/
struct ShadowRayPayload
{
    float visFactor;  ///< Will be 1.0 for fully lit, 0.0 for fully shadowed
};

/** The shadow ray is specific to the resampling project, and uses the ray epsilon in a different way.
*/
float shadowRay(float3 pos, float4 rayDirLen)
{
    RayDesc ray = { pos, gEpsilon, rayDirLen.xyz,  (rayDirLen.w - gEpsilon) };
    ShadowRayPayload payload = { 0.0f };
    TraceRay(gScene.rtAccel,
        RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER,
        0xFF, 0, rayTypeCount, 0, ray, payload);

    return payload.visFactor;
}

/** A shadow ray that skips transparent / alpha-tested geometry
*/
bool conservativeShadowRay(float3 pos, float4 rayDirLen)
{
    RayDesc ray = { pos, gEpsilon, rayDirLen.xyz,  (rayDirLen.w - gEpsilon) };
    ShadowRayPayload payload = { 0.0f };
    TraceRay(gScene.rtAccel,
        RAY_FLAG_CULL_NON_OPAQUE | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER,
        0xFF, 0, rayTypeCount, 0, ray, payload);

    return (payload.visFactor > 0.0f);
}

/** What code is executed when our ray misses all geometry?
*/
[shader("miss")]
void ShadowMiss(inout ShadowRayPayload rayData)
{
    // If we miss all geometry, then the light is visibile
    rayData.visFactor = 1.0f;
}

/** What code is executed when our ray hits a potentially transparent surface?
*/
[shader("anyhit")]
void ShadowAnyHit(inout ShadowRayPayload rayData, BuiltInTriangleIntersectionAttributes attribs)
{
    // Run a Falcor helper to extract the current hit point's geometric data
    const uint globalInstanceID = getGlobalInstanceID();
    VertexData vsOut = getVertexData(globalInstanceID, PrimitiveIndex(), attribs);
    const uint materialID = gScene.getMaterialID(globalInstanceID);

    // Test if the alpha test fails
    if (alphaTest(vsOut, gScene.materials[materialID], gScene.materialResources[materialID], 0))
    {
        IgnoreHit();
    }
}

/** What code is executed when we have a new closest hitpoint?  Should never be used / referenced / executed
*/
[shader("closesthit")]
void ShadowClosestHit(inout ShadowRayPayload rayData, BuiltInTriangleIntersectionAttributes attribs)
{
}


